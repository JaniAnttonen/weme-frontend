{"version":3,"sources":["webpack:///./src/api/index.js","webpack:///./src/pages/app/login.js","webpack:///./src/components/main.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/regenerator-runtime/runtime-module.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js"],"names":["fetchGoogle","_ref","asyncToGenerator_default","regenerator_default","a","mark","_callee","body","wrap","_context","prev","next","fetch","abrupt","sent","stop","this","_x","apply","arguments","Login","_useState","useState","username","password","state","setState","react_default","createElement","layout","seo","title","keywords","main","className","type","placeholder","value","onChange","e","target","onClick","api","then","console","log","gatsby_browser_entry","to","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Main","props","children","global","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","result","done","toString","keys","object","key","push","reverse","length","pop","Context","reset","skipTempReset","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function","g","hadRuntime","getOwnPropertyNames","indexOf","oldRuntime","asyncGeneratorStep","gen","_next","_throw","args"],"mappings":"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","file":"component---src-pages-app-login-js-e9fb20236e6b0d2ca0c2.js","sourcesContent":["export const fetchGoogle = async body => {\n  return await fetch('127.0.0.1')\n}\n","import React, { useState } from 'react'\nimport { Link } from 'gatsby'\n\nimport * as api from '../../api'\n\nimport Layout from '../../components/layout'\nimport SEO from '../../components/seo'\nimport Main from '../../components/main'\n\nconst Login = () => {\n  const [state, setState] = useState({ username: '', password: '' })\n  const onSubmit = () => api.fetchGoogle().then(console.log)\n  return (\n    <Layout>\n      <SEO title=\"Sign In\" keywords={[`weme`, `login`]} />\n      <Main className=\"py-10\">\n        <div className=\"container flex flex-col items-center justify-center\">\n          <h1 className=\"font-heading\">Sign in</h1>\n          <div className=\"flex flex-col items-center md:w-1/3 sm:w-1/2 mt-10\">\n            <input\n              type=\"text\"\n              className=\"mb-4 p-2 shadow-inner rounded-input w-full border border-grey-dark\"\n              placeholder=\"Username*\"\n              value={state.username}\n              onChange={e => setState({ username: e.target.value })}\n            />\n            <input\n              type=\"text\"\n              className=\"mb-4 p-2 shadow-inner rounded-input w-full border border-grey-dark\"\n              placeholder=\"Password*\"\n              value={state.password}\n              onChange={e => setState({ password: e.target.value })}\n            />\n            <a>Forgot password?</a>\n            <button\n              className=\"bg-teal hover:bg-green hover:border-green text-white py-2 px-10 border border-teal rounded no-underline mt-10 mb-2 shadow\"\n              onClick={() => onSubmit()}\n            >\n              Login\n            </button>\n            <div>\n              Do not have an account? Please,{' '}\n              <Link to=\"/app/join\">sign up</Link>\n            </div>\n          </div>\n        </div>\n      </Main>\n    </Layout>\n  )\n}\n\nexport default Login\n","import React from 'react'\n\nconst Main = props => {\n  const { children, className } = props\n  return (\n    <div\n      className={`container mx-auto w-full max-w-xl px-2 flex flex-wrap justify-stretch${\n        className ? ' ' + className : ''\n      }`}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Main\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;"],"sourceRoot":""}