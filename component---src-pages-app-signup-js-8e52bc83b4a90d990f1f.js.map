{"version":3,"sources":["webpack:///./src/pages/app/signup.js","webpack:///./src/components/main.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./src/api/index.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/regenerator-runtime/runtime-module.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js"],"names":["SignUp","_useState","useState","email","password","state","setState","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","title","keywords","_components_main__WEBPACK_IMPORTED_MODULE_6__","className","type","placeholder","value","onChange","e","Object","assign","target","onClick","api","then","console","log","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Main","props","children","global","undefined","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","next","result","done","toString","keys","object","key","push","reverse","length","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","stop","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function","signIn","_ref","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_callee","data","_context","fetch","mode","headers","Content-Type","body","JSON","stringify","_x","apply","arguments","signUp","_ref2","_callee2","_context2","_x2","g","hadRuntime","getOwnPropertyNames","indexOf","oldRuntime","asyncGeneratorStep","gen","_next","_throw","args"],"mappings":"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","file":"component---src-pages-app-signup-js-8e52bc83b4a90d990f1f.js","sourcesContent":["import React, { useState } from 'react'\nimport { Link } from 'gatsby'\n\nimport * as api from '../../api'\n\nimport Layout from '../../components/layout'\nimport SEO from '../../components/seo'\nimport Main from '../../components/main'\n\nconst SignUp = () => {\n  const [state, setState] = useState({ email: '', password: '' })\n  const onSubmit = () => api.signUp(state).then(console.log)\n  return (\n    <Layout>\n      <SEO title=\"Sign In\" keywords={[`weme`, `SignUp`]} />\n      <Main className=\"py-10\">\n        <div className=\"container flex flex-col items-center justify-center\">\n          <h1 className=\"font-heading\">Sign up</h1>\n          <div className=\"flex flex-col items-center md:w-1/3 sm:w-1/2 mt-10\">\n            <input\n              type=\"text\"\n              className=\"mb-4 p-2 shadow-inner rounded-input w-full border border-grey-dark\"\n              placeholder=\"Email*\"\n              value={state.email}\n              onChange={e => setState({ ...state, email: e.target.value })}\n            />\n            <input\n              type=\"password\"\n              className=\"mb-4 p-2 shadow-inner rounded-input w-full border border-grey-dark\"\n              placeholder=\"Password*\"\n              value={state.password}\n              onChange={e => setState({ ...state, password: e.target.value })}\n            />\n            <button\n              className=\"bg-teal hover:bg-green hover:border-green text-white py-2 px-10 border border-teal rounded no-underline mt-3 mb-2 shadow\"\n              onClick={() => onSubmit()}\n            >\n              Sign up\n            </button>\n            <div>\n              Already have an account? Please,{' '}\n              <Link to=\"/app/signin\">sign in</Link>\n            </div>\n          </div>\n        </div>\n      </Main>\n    </Layout>\n  )\n}\n\nexport default SignUp\n","import React from 'react'\n\nconst Main = props => {\n  const { children, className } = props\n  return (\n    <main\n      className={`container mx-auto w-full max-w-xl px-2 flex flex-wrap justify-stretch${\n        className ? ' ' + className : ''\n      }`}\n    >\n      {children}\n    </main>\n  )\n}\n\nexport default Main\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","export const signIn = async data => {\n  console.log(data)\n  return await fetch('http://localhost:3001/login', {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n}\n\nexport const signUp = async data => {\n  console.log(data)\n  return await fetch('http://localhost:3001/signup', {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n}\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;"],"sourceRoot":""}